# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7dLskIyWkeM8RzRAPF0r2pVp8TPB2yf
"""

import pandas as pd

import csv

def convert_to_csv(input_file, output_file):
    """
    Convert the text file containing package data into a properly formatted CSV file.

    Args:
        input_file (str): Path to the input text file
        output_file (str): Path to the output CSV file
    """
    # Read the input file
    with open(input_file, 'r') as f:
        lines = f.readlines()

    # Fix the header by splitting the combined column
    header = lines[0].strip().split(',')
    # Find the combined column and split it
    for i, col in enumerate(header):
        if 'top_right_x_top_right_y' in col:
            header[i:i+1] = ['top_right_x', 'top_right_y']

    # Process the data rows
    data = []
    for line in lines[1:]:
        # Split the line and strip any whitespace
        row = [val.strip() for val in line.strip().split(',')]
        data.append(row)

    # Write to the CSV file
    with open(output_file, 'w', newline='') as f:
        writer = csv.writer(f)
        # Write the corrected header
        writer.writerow(header)
        # Write the data rows
        writer.writerows(data)

# Example usage

input_file = "50_packages_output[1].txt"
output_file = "package_data.csv"
convert_to_csv(input_file, output_file)
print(f"Successfully converted {input_file} to {output_file}")

df=pd.read_csv("/content/package_data.csv")
df.head()

df['package_number']

import pandas as pd
import plotly.graph_objects as go

def draw_uld_visualization_with_packages(csv_file, output_html):
    # Load the data from the CSV file
    data = pd.read_csv(csv_file)

    # Define ULD coordinates and colors based on the ULD numbers
    uld_coordinates = {

        1: {'bottom_left': (274, 0, 0), 'top_right': (498, 318, 162), 'color': 'pink'},
        2: {'bottom_left': (548, 0, 0), 'top_right': (742, 318, 244), 'color': 'yellow'},
    }

    # Create a 3D plot
    fig = go.Figure()

    # Add ULDs as cuboids
    for uld, properties in uld_coordinates.items():
        x_min, y_min, z_min = properties['bottom_left']
        x_max, y_max, z_max = properties['top_right']
        color = properties['color']

        # Define the vertices of the cuboid
        vertices = [
            [x_min, y_min, z_min], [x_max, y_min, z_min], [x_max, y_max, z_min], [x_min, y_max, z_min],  # Bottom face
            [x_min, y_min, z_max], [x_max, y_min, z_max], [x_max, y_max, z_max], [x_min, y_max, z_max]   # Top face
        ]

        # Define the edges of the cuboid
        edges = [
            [0, 1], [1, 2], [2, 3], [3, 0],  # Bottom face edges
            [4, 5], [5, 6], [6, 7], [7, 4],  # Top face edges
            [0, 4], [1, 5], [2, 6], [3, 7]   # Vertical edges
        ]

        # Add edges to the plot
        for edge in edges:
            x_coords = [vertices[edge[0]][0], vertices[edge[1]][0]]
            y_coords = [vertices[edge[0]][1], vertices[edge[1]][1]]
            z_coords = [vertices[edge[0]][2], vertices[edge[1]][2]]
            fig.add_trace(go.Scatter3d(
                x=x_coords, y=y_coords, z=z_coords,
                mode='lines',
                line=dict(color='black', width=5),
                showlegend=False
            ))

        # Add a solid cuboid for the ULD
        fig.add_trace(go.Mesh3d(
            x=[x_min, x_max, x_max, x_min, x_min, x_max, x_max, x_min],
            y=[y_min, y_min, y_max, y_max, y_min, y_min, y_max, y_max],
            z=[z_min, z_min, z_min, z_min, z_max, z_max, z_max, z_max],
            color=color,
            opacity=0.5,
            name=f'ULD {uld}'
        ))

    # Add packages as cuboids
    for _, row in data.iterrows():
        uld = row['uld_number']

        # Ensure the ULD exists in the dictionary
        if uld not in uld_coordinates:
            print(f"Warning: ULD {uld} not found in uld_coordinates. Skipping this package.")
            continue

        x_offset_min, y_offset_min, z_offset_min = uld_coordinates[uld]['bottom_left']

        # Get the coordinates for the cuboid (package)
        x0 = row['bottom_left_x'] + x_offset_min
        y0 = row['bottom_left_y'] + y_offset_min
        z0 = row['bottom_left_z'] + z_offset_min
        x1 = row['top_right_x'] + x_offset_min
        y1 = row['top_right_y'] + y_offset_min
        z1 = row['top_right_z'] + z_offset_min

        # Define the vertices of the cuboid
        vertices = [
            [x0, y0, z0], [x1, y0, z0], [x1, y1, z0], [x0, y1, z0],  # Bottom face
            [x0, y0, z1], [x1, y0, z1], [x1, y1, z1], [x0, y1, z1]   # Top face
        ]

        # Define the edges of the cuboid
        edges = [
            [0, 1], [1, 2], [2, 3], [3, 0],  # Bottom face edges
            [4, 5], [5, 6], [6, 7], [7, 4],  # Top face edges
            [0, 4], [1, 5], [2, 6], [3, 7]   # Vertical edges
        ]

        # Add edges to the plot
        for edge in edges:
            x_coords = [vertices[edge[0]][0], vertices[edge[1]][0]]
            y_coords = [vertices[edge[0]][1], vertices[edge[1]][1]]
            z_coords = [vertices[edge[0]][2], vertices[edge[1]][2]]
            fig.add_trace(go.Scatter3d(
                x=x_coords, y=y_coords, z=z_coords,
                mode='lines',
                line=dict(color='black', width=3),
                showlegend=False
            ))

    # Update the layout for better visualization
    fig.update_layout(
        scene=dict(
            xaxis_title='X Axis',
            yaxis_title='Y Axis',
            zaxis_title='Z Axis',
            aspectmode='data'
        ),
        title='Visualization of ULDs with Packages',
    )

    # Save the plot to an HTML file
    fig.write_html(output_html)
    print(f"Visualization saved to {output_html}")

# Example usage
csv_file = '/content/package_data.csv'  # Replace with your CSV file path
output_html = 'uld_visualization__1.html'  # Output file name
draw_uld_visualization_with_packages(csv_file, output_html)